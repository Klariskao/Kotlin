// Solution for Kotlin Koans
// Found at:
// https://play.kotlinlang.org/koans/Conventions/Operators%20overloading/DateUtil.kt

import TimeInterval.*

data class MyDate(val year: Int, val month: Int, val dayOfMonth: Int)

// Supported intervals that might be added to dates:
enum class TimeInterval { DAY, WEEK, YEAR }

class ExtendedTimeInterval(val timeInterval: TimeInterval, val number: Int)

operator fun MyDate.plus(timeInterval: TimeInterval): MyDate = this.addTimeIntervals(timeInterval, 1)
operator fun MyDate.plus(timeInterval: ExtendedTimeInterval): MyDate = this.addTimeIntervals(timeInterval.timeInterval, timeInterval.number)
operator fun TimeInterval.times(number: Int) = ExtendedTimeInterval(this, number)

fun task1(today: MyDate): MyDate {
    return today + YEAR + WEEK
}

fun task2(today: MyDate): MyDate {
    return today + YEAR * 2 + WEEK * 3 + DAY * 5
}

// DateUtil.kt

import java.util.Calendar

fun MyDate.addTimeIntervals(timeInterval: TimeInterval, amount: Int): MyDate {
	val c = Calendar.getInstance()
	c.set(year + if(timeInterval == TimeInterval.YEAR) amount else 0, month, dayOfMonth)
	var timeInMillis = c.timeInMillis
	val millisecondsInADay = 24 * 60 * 60 * 1000L
	timeInMillis += amount * when(timeInterval) {
		TimeInterval.DAY -> millisecondsInADay
		TimeInterval.WEEK -> 7 * millisecondsInADay
		TimeInterval.YEAR -> 0L
	}
	val result = Calendar.getInstance()
	result.timeInMillis = timeInMillis
	return MyDate(result.get(Calendar.YEAR), result.get(Calendar.MONTH), result.get(Calendar.DATE))
}